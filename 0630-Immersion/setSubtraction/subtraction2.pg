##DESCRIPTION
##  PreAlgebra problem:
##ENDDESCRIPTION

##KEYWORDS('prealgebra','common core')

## DBsubject('Arithmetic')
## DBchapter('Integers')
## DBsection('Addition/subtraction')
## Date('3/8/2015')
## Author('Andrew Parker')
## Institution('NYC CityTech')
## ProblemTester('')
## TitleText1('')
## Publisher('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "problemRandomize.pl",
   "parserRadioButtons.pl",
   "parserPopUp.pl",
   "scaffold.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

#  Allow for the user to try another version of the problem once they get it correct.
ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 0;

##############################################################
#
#  Setup
#
#

Context("Numeric");
Context()->flags->set(
     reduceConstants => 0,
     reduceConstantFunctions => 0,
   );

  $sumChecker = sub {
     my ($correct,$student,$ansHash) = @_; 
     my $studentstring = $ansHash->{preview_text_string};
     return ($studentstring eq $ansHash->{correct_ans} ? 1 : 0);
   };


## Part 1: Keep-Change-Change ##

  $posexA = Real(random(4,8,1));
  do { $posexB = Real(random(2,5,1)); } until ( $posexA - $posexB > 1 );
  $negexA = Real(-1*$posexA);
  $negexB = Real(-1*$posexB);
  $addSUB = PopUp(["?", "Addition", "Subtraction"], "Subtraction");
  $ADDsub = PopUp(["?", "Addition", "Subtraction"], "Addition");
  
## Part 2: Rewriting with Keep-Change-Change ##

  $posA = random(1,9,1);
  $posB = random(1,9,1);
  $negA = Real(-1*$posA);
  $negB = Real(-1*$posB);
  $expNP = Formula("$negA+$negB");
  $expNN = Formula("$negA+$posB");
  $expPP = Formula("$posA+$negB");
  $expPN = Formula("$posA+$posB");

## Part 3: Looking for patterns ##

  $prob1A = 5*random(1,7,2);
  $prob1B = 5*random(6,12,2);
  $opp1B = Real(-1*$prob1B);
  $exp1 = Formula("$prob1A + $opp1B");
  $result1 = Real($prob1A - $prob1B);
  $prob2A = -10*random(4,12,2);
  $prob2B = -10*random(1,6,1);
  $opp2B = Real(-1*$prob2B);
  $exp2 = Formula("$prob2A + $opp2B");
  $result2 = Real($prob2A - $prob2B);
  $prob3A = -13*random(1,9,1);
  $prob3B = 13*random(1,9,1);
  $opp3B = Real(-1*$prob3B);
  $exp3 = Formula("$prob3A + $opp3B");
  $result3 = Real($prob3A - $prob3B);
  
  

##############################################################
#
#  Text
#
#

##    to disable arithmetic operations in the answer.  Student must simplify.
Context()->operators->undefine("-","/","*");

##############################################################
# Scaffolding
Scaffold::Begin(
      can_open => "when_previous_correct",
      is_open  => "first_incorrect"
);
##############################################################
Section::Begin("Part 1: Keep-Change-Change");

Context()->texStrings;
BEGIN_TEXT

$PAR
In this problem we will practice the Keep-Change-Change technique for subtraction problems. We spent an entire assignment practicing addition problems, and we don't need to relearn all those concepts for subtraction. Instead, we will practice the Keep-Change-Change technique to turn every subtraction problem into an addition problem, which we're already good at!
$PAR
This technique has three easy parts. Each part of the technique corresponds to a piece of the subtraction problem: the initial value, the subtraction operation, and the value to be subtracted.
$PAR
First: $BBOLD KEEP $EBOLD the initial value. 
$BR
Second: $BBOLD CHANGE $EBOLD the subtraction operation to addition.
$BR
Third: $BBOLD CHANGE $EBOLD the sign of the value following the subtraction.
$PAR
Consider the following example: \( $negexA - $posexB \)
$PAR
(a) What is the initial value? \{ ans_rule(5) \}
$BR
(b) What operation are we being asked to perform? \{ $addSUB->menu() \}
$BR
(c) What number follows the operation? \{ Real($posexB)->ans_rule() \}
$BR
(d) After applying Keep-Change-Change, how will we rewrite this problem using addition? \{ ans_rule(10) \}

END_TEXT
Context()->normalStrings;

ANS( $negexA->cmp() );
ANS( $addSUB-> cmp() );
ANS( $posexB->cmp() );
ANS( Formula("$negexA + $negexB")->cmp(checker=>$sumChecker) );
# ANS( $negexA-> cmp() );
# ANS( $ADDsub-> cmp() );
# ANS( $negexB->cmp() );

Section::End();
##############################################################
Section::Begin("Part 2: Practice rewriting with Keep-Change-Change");

Context()->texStrings;
BEGIN_TEXT
$PAR
Now we're going to practice using Keep-Change-Change. You'll be asked to convert subtraction problems into addition problems. Notice that you're not being asked to evaluate a final result - just rewrite the problem using addition instead of subtraction.
$BR
Write \( $negA - $posB \) as an expression using addition \{ $expNP->ans_rule \}
$BR
Write \( $negA - ($negB) \) as an expression using addition \{ $expNN->ans_rule \}
$BR
Write \( $posA - $posB \) as an expression using addition \{ $expPP->ans_rule \}
$BR
Write \( $posA - ($negB) \) as an expression using addition \{ $expPN->ans_rule \}
$BR
END_TEXT
Context()->normalStrings;

ANS( $expNP->cmp( checker => $sumChecker ) );
ANS( $expNN->cmp( checker => $sumChecker ) );
ANS( $expPP->cmp( checker => $sumChecker ) );
ANS( $expPN->cmp( checker => $sumChecker ) );

Section::End();

##############################################################
Section::Begin("Part 3: Evaluating subtraction with Keep-Change-Change");

Context()->texStrings;
BEGIN_TEXT
$PAR
Now that you've got the hang of using Keep-Change-Change to convert subtraction problems into addition problems, we can find the results of subtraction using what we already know about addition.
$PAR
$PAR

Use Keep-Change-Change to rewrite \( $prob1A - $prob1B \) \{ $exp1->ans_rule() \}
$BR
Evaluate \( $prob1A - $prob1B \)  using the addition from your last answer. \{ $result1->ans_rule() \}
$PAR
Use Keep-Change-Change to rewrite \( $prob2A - ( $prob2B ) \) \{ $exp2->ans_rule() \}
$BR
Evaluate \( $prob2A - ( $prob2B ) \)  using the addition from your last answer. \{ $result2->ans_rule() \}
$PAR
Use Keep-Change-Change to rewrite \( $prob3A - $prob3B \) \{ $exp3->ans_rule() \}
$BR
Evaluate \( $prob3A - $prob3B \)  using the addition from your last answer. \{ $result3->ans_rule() \}
$PAR

END_TEXT
Context()->normalStrings;

ANS( $exp1->cmp( checker => $sumChecker ) );
ANS( $result1->cmp() );
ANS( $exp2->cmp( checker => $sumChecker ) );
ANS( $result2->cmp() );
ANS( $exp3->cmp( checker => $sumChecker ) );
ANS( $result3->cmp() );

Section::End();

Scaffold::End();

##############################################################
#
#  Answers
#
#


ENDDOCUMENT();        
COMMENT('MathObject version. Not randomized.');