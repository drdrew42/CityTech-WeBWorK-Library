########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

    ###########################
    #
    #  Subclass the numeric functions
    #
    package my::Function::numeric;
    our @ISA = ('Parser::Function::numeric');

    #
    #  Override sqrt() to return a special value (usually 1) when evaluated
    #  effectively eliminating it from the product.
    #
    sub sqrt {
      my $self = shift;
      my $value = $self->context->flag("setSqrt");
      return $value+1 if $value && $_[0] == 1;  # force sqrt(1) to be incorrect
      return $value if $value;
      return $self->SUPER::sqrt(@_);
    }

    #
    #  end of subclass
    #
    package main;

    ###########################

##############################################################
#
#  Setup
#
#
Context("Numeric")->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
Context()->variables->are(x=>[Real, limits=>[0,2]], y=>[Real, limits=>[0,2]]);
Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
LimitedPowers::OnlyPositiveIntegers();
Parser::Number::NoDecimals();

$rad = list_random(2,3,5,6,7,10,11);

$cX1 = random(3,9,1);
$cY = random(3,9,1);
do { $cX2 = random(3,9,1); } until ( $cX2 != $cX1 );

$cX = $cX1 - $cX2;

$problem = Formula("$cX1 sqrt(x) + $cY sqrt(y) - $cX2 sqrt(x)");

$ans = Formula("$cX sqrt( x ) + $cY sqrt( y )");

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

$PAR
Add or subtract the radical expression, if possible. 
$BR Do not use rational exponents in your answer.
$PAR
\[ \large{ $problem } \]
$BR
\{ans_rule(10)\}
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($ans->cmp(checker => sub {
      my ($correct,$student,$ans) = @_;
      return 0 if $ans->{isPreview} || $correct != $student;
      Context()->flags->set(setSqrt => 1);
      delete $correct->{test_values}, $student->{test_values};
      my $OK = ($correct == $student); # check if equal when sqrt's are replaced by 1
      Context()->flags->set(setSqrt => 0);
      Value::Error("You must simplify your answer further") unless $OK;
      return $OK;
    })->withPostFilter(sub { 
  my $ans = shift; 
  $ans->{ans_message} = "Use 'sqrt(...)' instead of rational exponents." 
    if $ans->{ans_message} eq "Powers must be positive integer constants";
  return $ans; 
}));


ENDDOCUMENT();        