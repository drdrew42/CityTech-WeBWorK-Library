DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGML.pl"
);

###########################
#
# Subclass the numeric functions
#
package my::Function::numeric;
our @ISA = ('Parser::Function::numeric');

#
# Override log() to return a special value (usually 1) when evaluated
# effectively eliminating it from the product.
#
sub log {
  my $self = shift;
  my $value = $self->context->flag("setLog");
  return $value+1 if $value && $_[0] == 10; # force log(10) to be incorrect
  return $value if $value;
  return $self->SUPER::log(@_);
}

#
# end of subclass
#
package main;

###########################

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
Context()->functions->set(log=>{class=>'my::Function::numeric'});
Context()->variables->are(x => ["Real", limits => [0.1,2]],y => ["Real", limits => [0.1,2]],z => ["Real", limits => [0.1,2]]);

$logCheck = sub {
  my ($correct,$student,$ans) = @_;
  return 0 if $ans->{isPreview} || $correct != $student;
  #
  #  Get parsed formula for student and correct answers
  #
  $student = $ans->{student_formula};
  $correct = $correct->{original_formula} if defined $correct->{original_formula};
  #
  # check if equal when logs are replaced by 1
  #
  Context()->flags->set(setLog => 1);
  delete $correct->{test_values}, $student->{test_values};
  my $OK = ($correct == $student);
  Context()->flags->set(setLog => 0);
  delete $correct->{test_values}, $student->{test_values};
  Value::Error("Your answer can be expanded further.") unless $OK;
  return $OK;
};

$m = random(2,9,1);
$n = random(2,9,1);
$p = random(2,9,1);
do { $q = random(2,9,1); } until ( $q != $m && $q != n && $q != $p );
$mq = $m*$q;
$nq = $n*$q;
$pq = $p*$q;


$exp1 = Formula("log( ( x^$m z^$n )/ y^$p )");
$exp2 = Formula("log( x^$p / ( y^$n z^$m) )");
$exp3 = Formula("log( (x^$n / (y^$m z^$n))^$q )");

$ans1 = Formula("$m log(x)+ $n log(z)- $p log(y)");
$ans2 = Formula("$p log(x)-$n log(y)-$m log(z)");
$ans3 = Formula("$nq log(x)-$mq log(y)-$nq log(z)");

##############################################################
#
#  Text
#
#

BEGIN_PGML

Rewrite the following logarithms in expanded form by applying the properties of logarithms.

>> [`` [$exp1] = ``] [____________]{$ans1->cmp(checker=>$logCheck)} <<

>> [`` [$exp2] = ``] [____________]{$ans2->cmp(checker=>$logCheck)} <<

>> [`` [$exp3] = ``] [____________]{$ans3->cmp(checker=>$logCheck)} <<

END_PGML

ENDDOCUMENT();        
