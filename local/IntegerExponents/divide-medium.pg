##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Algebra')
## DBchapter('Fundamentals')
## DBsection('Real Numbers')
## Date('6/3/2002')
## Author('')
## Institution('')
## TitleText1('Precalculus')
## EditionText1('3')
## AuthorText1('Stewart, Redlin, Watson')
## Section1('1.1')
## Problem1('22')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

$warning = $showPartialCorrectAnswers == 1 ? "$PAR" : "$BBOLD Be careful! $EBOLD This problem will not specify which individual parts you get right. You must get them all correct at the same time! $PAR";

# Select two variables for this problem
@var = ("a", "b", "c", "d", "m", "n", "p", "q", "r", "s", "w", "x", "y", "z" );
$one = random(0,13,1);
# do { $two = random(0,13,1); } until ( $one != $two );

# Force students to combine exponents within fractions
$fractionChecker = sub {
  my ($correct,$student,$ans) = @_;
  return 0 unless $correct == $student;
  Value->Error("Please rewrite your answer without using negative exponents") unless $student->{tree}->class eq "BOP" && $student->{tree}{bop} eq "/";
  my $cden = Formula($correct->{tree}{rop});
  my $sden = Formula($student->{tree}{rop});
Value->Error("Your answer isn't completely simplified") unless $cden == $sden;
  return 1;
};


##############################################################
#
#  Setup
#
#
Context("Numeric");

Context()->variables->are( 
  $var[$one]=>Real, 
#  $var[$two]=>Real
);

$pSmall = random(3,9,1);
do{ $pLarge = random(5,15,1); } until ( $pLarge > $pSmall + 1 );

$nSmall = -1*$pSmall;
$nLarge = -1*$pLarge;

$pSum = $pSmall + $pLarge;
$pDiff = $pLarge - $pSmall;

@question = (
   Formula("$var[$one]^{$pSmall} / $var[$one]^{$pLarge}"),
   Formula("$var[$one]^{$pSmall} / $var[$one]^{$nLarge}"),
   Formula("$var[$one]^{$nSmall} / $var[$one]^{$pLarge}"),
   Formula("$var[$one]^{$nSmall} / $var[$one]^{$nLarge}"));

Context()->operators->undefine("+"," +","+ ");
Context()->operators->undefine("-"," -","- ");
Context()->operators->undefine("*"," *","* ");
Context()->{error}{msg}{"Can't use '+' in this context"} 
  = "Addition is disabled for this problem. Simplify the sum and resubmit your answer.";
Context()->{error}{msg}{"Can't use '-' in this context"} 
  = "Subtraction is disabled for this problem. Simplify the difference and resubmit your answer.";
Context()->{error}{msg}{"Can't use '*' in this context"} 
  = "Multiplication is disabled for this problem. Simplify the product and resubmit your answer.";
LimitedPowers::OnlyPositiveIntegers();
Context()->{error}{msg}{"Powers must be positive integer constants"} 
  = "Please rewrite your answer without using negative exponents.";

@answer = (
   Formula("1/($var[$one]^{$pDiff})"),
   Formula("$var[$one]^{$pSum}"),
   Formula("1/($var[$one]^{$pSum})"),
   Formula("$var[$one]^{$pDiff}")->with(test_at=>[[0]])
);


##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
$PAR
$warning
$BITALIC (a) $EITALIC Simplify \( \displaystyle{$question[0]} \) and write your answer without using negative exponents.
$PAR
\{$answer[0]->ans_rule\}
$PAR
$BITALIC (b) $EITALIC Simplify \( \displaystyle{$question[1]} \) and write your answer without using negative exponents.
$PAR
\{$answer[1]->ans_rule\}
$PAR
$BITALIC (c) $EITALIC Simplify \( \displaystyle{$question[2]} \) and write your answer without using negative exponents.
$PAR
\{$answer[2]->ans_rule\}
$PAR
$BITALIC (d) $EITALIC Simplify \( \displaystyle{$question[3]} \) and write your answer without using negative exponents.
$PAR
\{$answer[3]->ans_rule\}
END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($answer[0]->cmp(checker=>$fractionChecker));
ANS($answer[1]->cmp);
ANS($answer[2]->cmp(checker=>$fractionChecker));
ANS($answer[3]->cmp->withPostFilter(sub { 
  my $ans = shift; 
  $ans->{ans_message} = "Your answer isn't completely simplified." 
    if $ans->{ans_message} eq "The domain of your function doesn't match that of the correct answer";
  return $ans; 
}));

ENDDOCUMENT();        
