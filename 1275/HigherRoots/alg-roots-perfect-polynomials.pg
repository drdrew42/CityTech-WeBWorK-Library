DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "PGchoicemacros.pl",
   "answerHints.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

##############################################################
#
#  Setup
#
#
Context("Numeric")->variables->are("t"=>Real);
Context()->variables->set( t => { limits=>[-7,7] } );
Context()->strings->are(undefined => {}, imaginary => {alias => "undefined"});

@R = ( random(-1,1,2)*random(2,6,1), random(-1,1,2)*random(2,6,1), random(-1,1,2)*random(2,6,1), random(-1,1,2)*random(2,6,1), random(-1,1,2)*random(2,6,1), random(-1,1,2)*random(2,6,1) );

@RL = ();
@RR = ();
@ans = ();
@rad = ();

for ( $i =0; $i < 6; $i++ ) 
{
  $RL[$i] = -$R[$i] - 1;
  $RR[$i] = -$R[$i] + 1;
  $rad[$i] = Formula("t + $R[$i]")->reduce;
  $ans[$i] = ( $i % 2 == 0 ) ? Formula("abs($rad[$i])"): $rad[$i];
  $ans[$i] = $ans[$i]->with(test_at=>[ [$RL[$i]], [$RR[$i]] ]);
}


@problem = ( "\(\large{\sqrt{$rad[0]^2}}\)","\(\large{\sqrt[3]{$rad[1]^3}}\)", "\(\large{\sqrt[4]{$rad[2]^4}}\)", "\(\large{\sqrt[5]{$rad[3]^5}}\)", "\(\large{\sqrt[6]{$rad[4]^6}}\)", "\(\large{\sqrt[7]{$rad[5]^7}}\)" );

@slice = NchooseK(6,4);
@subQ = @problem[@slice];
@subA = @ans[@slice];
@subR = @rad[@slice];

@perm = NchooseK(4,4);
@inv = invert(@perm);

##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT
$PAR
Evaluate without using a calculator. Write "undefined" or "imaginary" if your result is not a real number.
$PAR
a) $subQ[$perm[0]] = \{ans_rule(10)\}
$PAR
b) $subQ[$perm[1]] = \{ans_rule(10)\}
$PAR
c) $subQ[$perm[2]] = \{ans_rule(10)\}
$PAR
d) $subQ[$perm[3]] = \{ans_rule(10)\}

END_TEXT
Context()->normalStrings;

##############################################################
#
#  Answers
#
#

ANS($subA[$perm[0]]->cmp->withPostFilter(AnswerHints(
  sub { 
    my ($correct,$student,$ans) = @_;
    return ( $student != $correct && $student == $subR[$perm[0]] );
  }  => "Be careful with even powers and roots!"
)));
ANS($subA[$perm[1]]->cmp->withPostFilter(AnswerHints(
  sub { 
    my ($correct,$student,$ans) = @_;
    return ( $student != $correct && $student == $subR[$perm[1]] );
  }  => "Be careful with even powers and roots!"
)));
ANS($subA[$perm[2]]->cmp->withPostFilter(AnswerHints(
  sub { 
    my ($correct,$student,$ans) = @_;
    return ( $student != $correct && $student == $subR[$perm[2]] );
  }  => "Be careful with even powers and roots!"
)));
ANS($subA[$perm[3]]->cmp->withPostFilter(AnswerHints(
  sub { 
    my ($correct,$student,$ans) = @_;
    return ( $student != $correct && $student == $subR[$perm[3]] );
  }  => "Be careful with even powers and roots!"
)));

ENDDOCUMENT();        
