##DESCRIPTION
##  Algebra: exponents and radicals 
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Properties of exponents, rational exponents and radicals)
## DBsection(Properties of rational exponents and radicals)
## Date(11/01/2009)
## Institution(University of Minnesota)
## Author(Jonathan Rogness)
## Level(2)
## MO(1)
## TitleText1('Algebra for College Students')
## AuthorText1('Kaufmann, Schwitters')
## EditionText1('8')
## Section1('5.4')
## Problem1('6')
## KEYWORDS('algebra', 'radicals')

## Adapted from Library/UMN/algebraKaufmannSchwitters/ks_5_4_6.pg
## Original version separated coefficient and radicand as different answers.
## This version asks students to input the entire radical result in reduced form.

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl",
   #"source.pl",        # allows code to be displayed on certain sites.
   #"PGcourse.pl",      # Customization file for the course
);

########################################################################

install_problem_grader(~~&std_problem_grader);

$showPartialCorrectAnswers = 0;

TEXT(beginproblem());

########################################################################

   # code essentially from Davide Cervone 4/25/10
    ###########################
    #
    # Subclass the numeric functions
    #
    package my::Function::numeric;
    our @ISA = ('Parser::Function::numeric');

    #
    # Override sqrt() to return a special value (usually 1) when evaluated
    # effectively eliminating it from the product.
    #
    sub sqrt {
      my $self = shift;
      my $value = $self->context->flag("setSqrt");
 
 return $value+2 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
      return $value if $value;
      return $self->SUPER::sqrt(@_);
    }

    #
    # end of subclass
    #
package main;

Context("Numeric");
Context()->flags->set(reduceConstants=>0, reduceConstantFunctions=>0);
    #
    # make sqrt() use our subclass
    #
    Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
    Context()->flags->set(reduceConstantFunctions=>0);
    #
   #
    # Don't allow fractional powers (avoids 1/2 power)
    # [Could subclass exponentiation to handle that as well]
    #
    LimitedPowers::OnlyPositiveIntegers();

$reducedSqrt = sub  {
      my ($correct,$student,$ans) = @_;
      return 0 if $ans->{isPreview} || $correct != $student;
      #
      #  Get parsed formula for student and correct answers
      #
      $student = $ans->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      #
      # check if equal when sqrt's are replaced by 1
      #
      Context()->flags->set(setSqrt => 1);
      delete $correct->{test_values}, $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(setSqrt => 0);
      #
      Value::Error("Your answer is not completely reduced.") unless $OK;
      return $OK;
    };

$a = random(-9,-3,2);
$b = random(2,8,2);

$ans1 = Compute("$a*$b");
$ans2 = Compute("15");
$ans = Formula("$ans1 sqrt($ans2)");
########################################################################

Context()->texStrings;
BEGIN_TEXT
Find the product
\[
( $a \sqrt{3})( $b \sqrt{5} )
\]
and express your answer in simplest radical form \(A \sqrt{C} \), where \(A\) and \(C\) are integers.
$PAR
Answer: \{ans_rule(20)\}$BR
$HR
* To write a square root, use "sqrt(...)" to represent \( \sqrt{...} \)
END_TEXT
Context()->normalStrings;

########################################################################

ANS( $ans->cmp(checker=>$reducedSqrt,formatStudentAnswer=>"reduced") );

ENDDOCUMENT();            