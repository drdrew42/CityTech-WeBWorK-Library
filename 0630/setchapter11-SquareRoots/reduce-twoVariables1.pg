##DESCRIPTION
##  Algebra: exponents and radicals 
##ENDDESCRIPTION


## DBsubject(Algebra)
## DBchapter(Properties of exponents, rational exponents and radicals)
## DBsection(Properties of rational exponents and radicals)
## Date('2/15/2016')
## Author('Parker')
## Institution('City Tech')
## KEYWORDS('algebra', 'radicals', 'exponents')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "contextLimitedPowers.pl"
);

########################################################################

$showPartialCorrectAnswers = 0;

TEXT(beginproblem());

   # code essentially from Davide Cervone 4/25/10
    ###########################
    #
    # Subclass the numeric functions
    #
    package my::Function::numeric;
    our @ISA = ('Parser::Function::numeric');

    #
    # Override sqrt() to return a special value (usually 1) when evaluated
    # effectively eliminating it from the product.
    #
    sub sqrt {
      my $self = shift;
      my $value = $self->context->flag("setSqrt");
 
 return $value+2 if $value && $_[0] == 1; # force sqrt(1) to be incorrect
      return $value if $value;
      return $self->SUPER::sqrt(@_);
    }

    #
    # end of subclass
    #
package main;

    Context("Numeric")->variables->are(
      a => ["Real", limits => [0,2]],    # only needed if a is used in the square roots
      b => ["Real", limits => [0,2]],    # only needed if b is used in the square roots
    );
    #
    # make sqrt() use our subclass
    #
    Context()->functions->set(sqrt=>{class=>'my::Function::numeric'});
    Context()->flags->set(reduceConstantFunctions=>0);
    #
   #
    # Don't allow fractional powers (avoids 1/2 power)
    # [Could subclass exponentiation to handle that as well]
    #
    LimitedPowers::OnlyPositiveIntegers();

$reducedSqrt = sub  {
      my ($correct,$student,$ans) = @_;
      return 0 if $ans->{isPreview} || $correct != $student;
      #
      #  Get parsed formula for student and correct answers
      #
      $student = $ans->{student_formula};
      $correct = $correct->{original_formula} if defined $correct->{original_formula};
      #
      # check if equal when sqrt's are replaced by 1
      #
      Context()->flags->set(setSqrt => 1);
      delete $correct->{test_values}, $student->{test_values};
      my $OK = ($correct == $student);
      Context()->flags->set(setSqrt => 0);
      #
      Value::Error("Check to see if your answer is simplified.") unless $OK;
      return $OK;
    };

########################################################################

$c = list_random(-6,-5,-4,-3,-2,2,3,4,5);
$d = random(5,7,2);
$e = random(3,7,2);
$f = random(2,6,2);

$g = Compute("4*$d")->reduce;

$ans1 = Compute("2*$c*a^(($e-1)/2)b^($f/2)")->reduce;
$ans = Compute("$ans1*sqrt($d*a)");

########################################################################

Context()->texStrings;
BEGIN_TEXT
Assume that \(a\) and \(b\) represent positive real numbers.  Simplify the expression
\[
$c \sqrt{$g a^{$e} b^{$f}}
\]
into the simplest radical form.
$PAR
Answer: \{ans_rule(20)\}
$HR
END_TEXT
Context()->normalStrings;

########################################################################

ANS( $ans->cmp(checker=>$reducedSqrt) );

ENDDOCUMENT();        