##DESCRIPTION
##  Algebra problem: true or false for inequality 
##ENDDESCRIPTION

##KEYWORDS('algebra', 'inequality', 'fraction')

## DBsubject('Arithmetic')
## DBchapter('Integers')
## DBsection('Division')
## Date('7/4/2015')
## Author('K. Andrew Parker')
## Institution('NYC City Tech')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

########################################################################

DOCUMENT();      

loadMacros(
   "PGstandard.pl",     # Standard macros for PG language
   "MathObjects.pl",
   "parserPopUp.pl",
   "scaffold.pl",
   "niceTables.pl",
   "parserMultiAnswer.pl"
);

# Print problem number and point value (weight) for the problem
TEXT(beginproblem());

# Show which answers are correct and which ones are incorrect
$showPartialCorrectAnswers = 1;

# Allow students to "Show Me Another" after finishing correctly
# ProblemRandomize(when=>"Correct",onlyAfterDue=>0);

##############################################################
#
#  Setup
#
#
Context("Numeric");
Context()->flags->set(
     reduceConstants => 0,
     reduceConstantFunctions => 0,
     formatStudentAnswer=>"parsed"
   );

  $treeChecker3 = sub {
      my ( $correct, $student, $self ) = @_;
      my ( $ab, $cd, $a, $b, $c, $d ) = @{$student};
      my ( $abc, $n1, $n2, $n3, $n4, $n5 ) = @{$correct};
      my @ret = (0,0,0,0,0,0);
      Value->Error("The product of $ab and $cd is not equal to $abc.") if ( $ab*$cd != $abc );
      Value->Error("Never use 1 in a factor tree, it doesn't help us break down $abc.") if ( $ab ==1 || $cd ==1 );
      $ret[0] = 1;
      $ret[1] = 1;
      $abPrime = 1;
      foreach my $i (2..($ab-1)) {
        if ( $ab % $i == 0 ) { $abPrime = 0; }
      }
      $cdPrime = 1;
      foreach my $i (2..($cd-1)) {
        if ( $cd % $i == 0 ) { $cdPrime = 0; }
      }
      if ( $abPrime ) {
        Value->Error("$ab is prime, it can't be factored any further. The boxes below it should be left blank.") if ( $a ne '' || $b ne '' );
        $ret[2] = 1;
        $ret[3] = 1;
      } else {
        Value->Error("$ab is not prime, you need to finish factoring it.") if ( $a eq '' || $b eq '' );
        Value->Error("The product of $a and $b is not equal to $ab.") if ( $a*$b != $ab );
        Value->Error("Never use 1 in a factor tree. It's not helping us break down $ab.") if ( $a ==1 || $b ==1 );
        $ret[2] = 1;
        $ret[3] = 1;
      }
      if ( $cdPrime ) {
        Value->Error("$cd is prime, it can't be factored any further. The boxes below it should be left blank.") if ( $c ne '' || $d ne '' );
        $ret[4] = 1;
        $ret[5] = 1;
      } else {
        Value->Error("$cd is not prime, you need to finish factoring it.") if ( $c eq '' || $d eq '' );
        Value->Error("The product of $c and $d is not equal to $cd.") if ( $c*$d != $cd );
        Value->Error("Never use 1 in a factor tree. It's not helping us break down $cd.") if ( $c ==1 || $d ==1 );
        $ret[4] = 1;
        $ret[5] = 1;
      }
      return [ @ret ];
  };

 @prime = ( 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 );

 @p = ( );
do {
 $p[0] = Real($prime[random(0,2,1)]);
 $p[1] = Real($prime[random(0,2,1)]);
 $p[2] = Real($prime[random(0,2,1)]);
 $abc = Real($p[0]*$p[1]*$p[2]);
} until ( $abc > 20 && $abc < 200 );

 $pfactorization = List( $p[0], $p[1], $p[2] );

 $multians = MultiAnswer($abc,Real(0),Real(0),Real(0),Real(0),Real(0))->with(
    singleResult=>0,
    allowBlankAnswers=>1,
    checker=>$treeChecker3
 );
##############################################################
#
#  Text
#
#

Context()->texStrings;
BEGIN_TEXT

\{
 DataTable(
  [
   ['','','','$abc','','',''],
   ['','','/','','\','',''],
   ['',ans_rule(2),'','','',ans_rule(2),''],
   ['/','','\','','/','','\'],
   [ans_rule(2),'',ans_rule(2),'',ans_rule(2),'',ans_rule(2),]
  ], 
  caption => 'Factor tree for $abc',
  align => 'c c c c c c c',
 );
\}
$PAR
List all the prime factors you found in the tree above. Primes that show up more than once will need to be listed multiple times. (For example, the prime factor list for 25 would be "5, 5".)
$BR
\{ans_rule(10)\}

END_TEXT
Context()->normalStrings;

ANS( $multians->cmp() );

ANS( $pfactorization->cmp(showLengthHints=>1, ordered=>0) );


ENDDOCUMENT();        